AWSTemplateFormatVersion: 2010-09-09
Description: Soteria component stack
Transform: AWS::Serverless-2016-10-31

#!#########################################################################################
#! Parameters:
#!#########################################################################################
Parameters:
  StackName:
    Type: String

  OpenApiBucket:
    Type: String
    Description: Name bucket which holds temp files

  UserDomainName:
    Type: String

  ApiDomainName:
    Type: String

  CognitoUserPoolArn:
    Type: String

  CanaryDeploymentType:
    Type: String
    Description: Deployment Preference Type
    Default: "Canary10Percent5Minutes"

#!#########################################################################################
#! Globals:
#!#########################################################################################
Globals:
  Function:
    Handler: lambda_function.lambda_handler
    Runtime: python3.8
    Timeout: 30
    MemorySize: 128
    Layers:
      - !Ref LambdaLayer
    AutoPublishAlias: live
    DeploymentPreference:
      Type: !Ref CanaryDeploymentType
      # Hooks:
      #   # Validation Lambda functions that are run before & after traffic shifting
      #   PreTraffic: !Ref PreTrafficLambdaFunction
      #   PostTraffic: !Ref PostTrafficLambdaFunction

#!#########################################################################################
#! Resources:
#!#########################################################################################
Resources:
  #*##############################################
  #* AWS::Lambda::*
  #*##############################################
  LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content: ../packages/layer
      Description: !Sub "${StackName}"
      LayerName: !Sub "${StackName}-lambda-layer"

  LambdaGetForms:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-getForms"
      CodeUri: ../packages/getForms
      Environment:
        Variables:
          TableName: !Sub "${StackName}-forms"
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource: !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"

  LambdaGetForm:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-getForm"
      CodeUri: ../packages/getForm
      Environment:
        Variables:
          TableName: !Sub "${StackName}-forms"
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"

  LambdaAddForm:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-addForm"
      CodeUri: ../packages/addForm
      Environment:
        Variables:
          reactAppDomain: !Sub "https://${UserDomainName}/surveys"
          TableName: !Sub "${StackName}-forms"
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"

  LambdaDeleteForm:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-deleteForm"
      CodeUri: ../packages/deleteForm
      Environment:
        Variables:
          TableName: !Sub "${StackName}-forms"
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:DeleteItem
              Resource: !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"

  LambdaUpdateForm:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${StackName}-updateForm"
      CodeUri: ../packages/updateForm
      Environment:
        Variables:
          TableName: !Sub "${StackName}-forms"
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
    ##############################################
    # PreTraffic and PostTraffic lambda functions
    ##############################################
  # PreTrafficLambdaFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: preTrafficHook.lambda_handler
  #     CodeUri: ../packages/preTrafficHook
  #     Policies:
  #       - Version: "2012-10-17"
  #         Statement:
  #         - Effect: "Allow"
  #           Action:
  #             - "codedeploy:PutLifecycleEventHookExecutionStatus"
  #           Resource:
  #             !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*'
  #       - Version: "2012-10-17"
  #         Statement:
  #         - Effect: "Allow"
  #           Action:
  #             - "lambda:InvokeFunction"
  #           Resource:
  #             - !GetAtt LambdaGetForms.Arn
  #             - !GetAtt LambdaGetForm.Arn
  #             - !GetAtt LambdaAddForm.Arn
  #     FunctionName:
  #       !Join
  #         - '-'
  #         - - 'CodeDeployHook_preTrafficHook'
  #           - !Select [1, !Split ['-', !Ref AWS::StackName]]
  #           - !Select [2, !Split ['-', !Ref AWS::StackName]]
  #           - !Select [3, !Split ['-', !Ref AWS::StackName]]
  #     DeploymentPreference:
  #       Enabled: False

  # PostTrafficLambdaFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: postTrafficHook.lambda_handler
  #     CodeUri: ../packages/postTrafficHook
  #     Policies:
  #       - Version: "2012-10-17"
  #         Statement:
  #         - Effect: "Allow"
  #           Action:
  #             - "codedeploy:PutLifecycleEventHookExecutionStatus"
  #           Resource:
  #             !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*'
  #       - Version: "2012-10-17"
  #         Statement:
  #         - Effect: "Allow"
  #           Action:
  #             - "lambda:InvokeFunction"
  #           Resource:
  #             - !GetAtt LambdaGetForms.Arn
  #             - !GetAtt LambdaGetForm.Arn
  #             - !GetAtt LambdaAddForm.Arn
  #     FunctionName:
  #       !Join
  #         - '-'
  #         - - 'CodeDeployHook_postTrafficHook'
  #           - !Select [1, !Split ['-', !Ref AWS::StackName]]
  #           - !Select [2, !Split ['-', !Ref AWS::StackName]]
  #           - !Select [3, !Split ['-', !Ref AWS::StackName]]
  #     DeploymentPreference:
  #       Enabled: False

  #*##############################################
  #* AWS::API Gateway::*
  #*##############################################

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${StackName}-api"
      StageName: !Select [2, !Split ['-', !Ref AWS::StackName]]
      DefinitionBody:
        "Fn::Transform":
          Name: "AWS::Include"
          Parameters:
            Location: !Sub "s3://${OpenApiBucket}/openapi.yaml"
            # Location: !Sub "s3://${StackName}/output/packages/openapi/openapi.yaml"

  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Select [3, !Split ['-', !Ref AWS::StackName]]
      DomainName: !Sub "${ApiDomainName}"
      RestApiId: !Ref ApiGateway
      Stage: !Ref ApiGateway.Stage

  ApiKey:
    Type: "AWS::ApiGateway::ApiKey"
    DependsOn:
        - ApiGateway
    Properties:
        Name: !Sub ${StackName}-apikey
        Description: Forms API Key
        Enabled: "true"
        StageKeys:
            - RestApiId: !Ref ApiGateway
              StageName: !Ref ApiGateway.Stage

  usagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    Properties:
        ApiStages:
            - ApiId: !Ref ApiGateway
              Stage: !Ref ApiGateway.Stage
        Description: Forms usage plan
        # Quota:
        #     Limit: 5000
        #     Period: MONTH
        # Throttle:
        #     BurstLimit: 200
        #     RateLimit: 100
        UsagePlanName: !Sub ${StackName}-usage-plan

  usagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    DependsOn:
        - ApiGateway
        - ApiKey
    Properties:
        KeyId: !Ref ApiKey
        KeyType: API_KEY
        UsagePlanId: !Ref usagePlan

  #*##############################################
  #* AWS::IAM:: *
  #*##############################################
  APIGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ApiGatewayLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt LambdaGetForms.Arn
                  - !GetAtt LambdaGetForm.Arn
                  - !GetAtt LambdaAddForm.Arn
                  - !GetAtt LambdaDeleteForm.Arn
                  - !GetAtt LambdaUpdateForm.Arn

  #*##############################################
  #* AWS::DynamoDB ::*
  #*##############################################
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${StackName}-forms"
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE

      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: sk
              KeyType: HASH
            - AttributeName: pk
              KeyType: RANGE
          Projection:
            ProjectionType: "ALL"

  #*##############################################
  #* AWS::CloudFront ::*
  #*##############################################

  # CloudFrontDistribution:
  #   Type: AWS::CloudFront::Distribution
  #   Properties:
  #     DistributionConfig:
  #       Aliases: [!Sub "${AppDomainName}"]
  #       ViewerCertificate:
  #         AcmCertificateArn: !Sub "${AcmCertificateArn}"
  #         MinimumProtocolVersion: TLSv1.2_2018
  #         SslSupportMethod: sni-only
  #       Comment: !Sub "${Prefix}-distribution"
  #       Enabled: True
  #       DefaultRootObject: index.html
  #       DefaultCacheBehavior:
  #         ForwardedValues:
  #           QueryString: false
  #         AllowedMethods:
  #           - GET
  #           - HEAD
  #           - DELETE
  #           - OPTIONS
  #           - PATCH
  #           - POST
  #           - PUT
  #         TargetOriginId: !Sub "${Prefix}-origin"
  #         ViewerProtocolPolicy: redirect-to-https
  #       Origins:
  #       - DomainName: !GetAtt ApplicationBucket.DomainName
  #         Id: !Sub "${Prefix}-origin"
  #         S3OriginConfig:
  #           OriginAccessIdentity:
  #             Fn::Sub: origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
  #       CustomErrorResponses:
  #         - ErrorCode: 404
  #           ResponseCode: 200
  #           ResponsePagePath: /index.html
  #           ErrorCachingMinTTL: 0
  #         - ErrorCode: 403
  #           ResponseCode: 200
  #           ResponsePagePath: /index.html
  #           ErrorCachingMinTTL: 0

  # Route53RecordSetGroupWeb:
  #   Type: AWS::Route53::RecordSetGroup
  #   Properties:
  #     HostedZoneName: !Sub "${HostedZoneName}."
  #     RecordSets:
  #       - Name: !Sub "${AppDomainName}"
  #         Type: A
  #         AliasTarget:
  #           HostedZoneId: Z2FDTNDATAQYW2
  #           DNSName: !GetAtt CloudFrontDistribution.DomainName


  #!#########################################################################################
  #! Outputs:
  #!#########################################################################################
Outputs:
  FormsApi:
    Value: !Join
      - ''
      - - 'https://'
        - !Ref ApiGateway
        - .execute-api.
        - !Ref 'AWS::Region'
        - .
        - !Ref 'AWS::URLSuffix'
        - /
        - !Select [2, !Split ['-', !Ref AWS::StackName]]
